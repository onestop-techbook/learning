= 何を学べばいいのかわからなかった自分の生存戦略

//flushright{
yumechi
//}

社会人歴も長くなってきて、ようやく一人前のエンジニアになってきたような気もする yumechi です。
私はソフトウェアエンジニアとして、主にサーバーで動くプログラムや環境構築周りを担当するバックエンドを専門としたエンジニアとして働いています。

今回は私が社会人としてこれまでエンジニアを続けてきた中で、自分がどう考え学び、今日を生きるエンジニアとしての生存戦略について書いていきたいと思います。

== 自分のバックグラウンド

私は大学・大学院で情報科学について学び、基本情報技術者@<fn>{fundamental_IT}の取得や授業・研究を通してプログラミングを学びました。
競技プログラミング@<fn>{competitive}なども少しやっていましたが、プログラミングがそこまで得意であるとはあまり思いませんでした。

なぜプログラミングが得意でないと感じていたかというと、周りの人たちのスキル感や評価を見ているときに、自分がどうしても一歩及ばないように感じていたからです。
授業や研究では、他のメンバーにリードしてもらうことが多く、研究も自分がやりたいことを実現するための知識が足らずコードを書くことができませんでした。
他大学の競技プログラミングのコミュニティの方とも交流がありましたが、自分よりもはるかに優れたスキルを持っている方が多く、また年齢的にも自分より若い人が多かったため、向いていないのかなぁと感じていました。

自分はプログラミングに限らず、何かを学ぶこと自体が好きなタイプだったのでどうしても専門的に何かを学ぶということがあまり得意でなかったように感じます。
昔から本を読むのが好きなのですが、IT系の本だけでなく興味の向くまま本を読むタイプだったので、そういったことも影響しているのかもしれません。
むしろ勉強する中で、何か似たものを見つけたり、何かを組み合わせたりする発見を楽しんでいたように思います。
現在、似たようなパターンを見つける力はソフトウェアの開発やチームビルディング、プロジェクトマネジメントなどで役立っていますが、当時はそこまで深く考えていませんでした。

そんな学生生活を過ごしていた私も、大学での専門性を生かせる職業であるソフトウェアエンジニアとして働き始めました。
プログラミングが苦手といっても人並みにコードを書くことができたことや、ITのニーズが高まり続けていることもあったので、自分の能力を活かして何か社会に貢献できる仕事がしたいということで選びました。

最初は小さいSESの会社で働いていましたが、そこでソフトウェアエンジニアといっても様々な領域・働き方があることを知りました。
自分自身は漠然とソフトウェアエンジニアとして、プログラムを書いて働こうと考えていました。
しかし、同年代や先輩エンジニアのスキルを目の当たりにして、自分がどうすればいいのかわからなくなりました。
また関東、特に東京という場所も、自分が生まれ育った地域とは違い、人々の考え方や働き方も異なり苦労した覚えがあります。

//footnote[fundamental_IT][情報処理技術者試験の1つ。情報処理技術者試験の中で最も基本的な資格です。 https://www.ipa.go.jp/shiken/kubun/fe.html]
//footnote[competitive][プログラミングコンテストの1つ。アルゴリズムやデータ構造を駆使して与えられた問題を解いたり最適化します。。日本では AtCoder が有名です。 https://info.atcoder.jp/overview/about/competitive]

== なりたいものがわからなかったので、とりあえず学ぶ

社会人の1年目が終わりに近づくころ、東京でのいろいろな経験を通し、少しづつですがモダンな技術とは何かを考え始めました。
そこで活躍しているエンジニア（先輩・同年代）を見て行動を真似してみることにしました。
その人たちは技術的なトレンドをキャッチアップするためにITに関連したカンファレンスや勉強会などに参加していたので、私も参加してみました。

当時、私は Python@<fn>{Python} に興味が強く、PyCon JP@<fn>{pyconjp} に参加して見たことを覚えています。
自分が全く知らない分野の話などや機械学習の話を聞き、ソフトウェアテクノロジーの多様さを知り感動しました。
またコミュニティベースで開催されている勉強会では、当時業務で触っている分野以外の勉強会にも参加してみて、自分の知識を広げました。
参加した勉強会についてはブログを書いたり、実際に小さく動くコードを書いてみたりして、自分の理解を深めるようにしました。

今思い返すと、社会人の早い時期に闇雲にいろんな技術を学んでおいて本当によかったと思っています。
カンファレンス・勉強会の内容から技術的なトレンドを追ったり、技術との関わり方・選び方を学ぶことができました。
現在私は30代になり、立場もメンバーからリーダーになりました。
自分自身のプライベートの変化や考え方の変化などもあり、今から多くの技術を追うのは難しいかもしれません。
ですが、この時期に広く学んでおいたことが、いろんな分野のエンジニアと協力して働くことに役立ったり、自分のキャリアを考える上での選択肢を増やすことができたと思います。

//footnote[Python][汎用プログラミング言語。Web 開発やデータ分析、機械学習など幅広い分野で利用されています https://www.python.org/]
//footnote[pyconjp][日本で開催されるプログラミング言語 Python のカンファレンスです https://pycon.jp/]

== 転職する

勉強会などに参加した次のアクションとして趣味で勉強していた Python を使って実際に仕事してみたいと思い、転職もしました。
自社で SaaS@<fn>{SaaS} プロダクトを作っている会社に入ったのですが、学んできた Web 技術の知識や Python の知識が足らず、入社直後は多くの方に助けていただきました。
Web 技術はブラウザで動くものだけを考えると簡単なイメージを持つ方もいるかもしれません。
しかし当時の自分はブラウザで表示された結果を得るために、サーバー側でどのようなプログラム、アプリケーション、設定が必要なのか、またネットワークやプロトコルでは何をしているかなどWebの裏側で行われていることについて十分な知識や経験を持っていませんでした。

そこで Web 技術の開発を中心に学び直し、技術的な理解を深めるように努力しました。
ISUCON@<fn>{isucon} への参加も通して、サーバー向けのPC構成やミドルウェア設定、Web サービスアーキテクチャに対しての理解も深めることができました。
最終的には Python を使ったバックエンド開発だけでなく、Web サービスアーキテクチャを含めてプロダクト全体を考え動いていけるようになりました。
その後、何度か転職していますが、ソフトウェアエンジニアとしての礎はこの時期に Web 技術を学びなおしたことにより築かれたと感じています。

少し話は変わりますが、このころになると何度か登壇する機会もありました。
発表するためには、自分の理解を深めることも必要になります。
発表のために下調べをして、自分の理解を深めることができるので、自分の理解を深めるためにも登壇することは大変有意義だと感じています。
登壇以外にもブログを書いたり、この本のように執筆することも同じような効果があり、アウトプットが大事なことと考えています。

//footnote[SaaS][Software as a Service の略。インターネット経由でソフトウェアを提供するサービス形態のこと。ユーザーはソフトウェアをインストールすることなく、Webブラウザを通じて利用できます。 https://www.ntt.com/business/services/application/crm-dm/bconnection/lp/article-saas-invoice.html]
//footnote[isucon][Webサービスを高速化するチューニングバトルコンテストです。 https://isucon.net/]

== 広く学んできたものがようやく活きてきた

最近はリーダーとして、技術的な選択やアーキテクチャの設計や、プロジェクトの一部進行管理やメンバーの育成、チームビルディングを行っています。
プログラムも書いていますが、役割を果たすためにやることが増えてきたため、時間の捻出が難しい状況です。
そのため自分自身では新しい技術を追いかけることが難しくなりつつあります。

しかし、これまで広く学んできたことが技術の早いキャッチアップや勘所をつかむことに役立っていると感じています。
今年に入ってから Web サービスアーキテクチャの選定にも関わることが多くなりました。
そのためにAWS@<fn>{aws}を活用しなければならない状況となりました。
運がいいことにAWS@<fn>{aws}は過去の業務で他チームで利用していたことや、趣味でいくつかのサービス試してみたり資格試験を受けたりしていたので、知識がありました。
その知識を生かして、サービス選定やアーキテクチャ設計に関わることができ、プロダクトの成長に貢献できることができました。
技術的な質問についても勘所を抑え、AIに聞いたりドキュメントやGitHub@<fn>{github}で公開されているソースコードをピンポイントに読むことで、早急に判断・解決することができるようになったと感じています。

またキャリアの中でスクラムマスターを専任する機会がありましたが、そのタイミングでスクラムを含めたアジャイルやマネジメントについて深く学びました。
その結果、自分の思い込みや経験だけで進めるのではなく、本や勉強会などで学び直し、再現性のある方法論や典型パターンを学ぶことの大切さを知りました。
この経験がリーダーとして、メンバーの育成やプロジェクトの進行管理にも活きています。

そして今の自分の仕事はこれまで自分が広く学んできた知識を生かした総決算である、と感じています。
現在の私の仕事は期間やコストが限られている中、チームにとって最善の選択をしていくことが求められています。
広く学んできた知識を使って、期間・コスト・技術のバランスを考え、チームと共に最善の選択をしていき、プロダクトの成長に貢献しています。
いつか役に立つかわからない知識もありましたが、担当する業務領域が広くなることで役立ったこともありました。
いつどこでその機会が来るかはわからないので、広く学ぶことの大切さを感じています。
今後私は新しい技術もそうですが、今後マネジメントやビジネスについても考えてコミットしていく機会が増えてくると思います。
少しづつ時間を作って、マネジメントやビジネスについても学び、知識を深めたいと考えています。

//footnote[aws][Amazon Web Services の略。Amazon 社が提供しているクラウドサービスです。 https://aws.amazon.com/jp/]
//footnote[github][GitHub は、ソースコードのホスティングやバージョン管理を提供するプラットフォームです。 https://github.com/]

== これから何を学んでいくのかが決まっていない人へ

以上の経験から、私は広く学ぶことの大切さだと考えています。
必要とされたときに必要なものを学ぶことも大事ですが、時間があるときに広く学んでおくことで、いざというときの対応や新しい状況へのチャレンジに繋げられます。
私のキャリアの広がりは広く学んでおくことで、様々な可能性を模索できたことが大きいと感じています。
そのため私の生存戦略は、広く学び、新しい技術や分野に挑戦し、問題の解決に貢献することと言えそうです。

ただ私のように広く学ぶことが得意な人もいれば、何を学べばいいのかわからない人もいるかもしれません。
その場合は興味を持った技術や分野に積極的に触れてみることが大切だと考えています。
最初は何が自分に合っているのかわからないかもしれませんが、幅広くいろいろな本やWebサイトから情報を得てみましょう。
手を動かしてみることで、自分の興味や得意な分野が見えてくることもあります。

次に、コミュニティやカンファレンス・勉強会に参加することをおすすめします。
自分一人で学ぶよりも、他のエンジニアと交流・議論することで新しい視点や知識を得ることができます。
ほかの人と比較していく中で、自分の弱点や強みが見えてくることもあり、自分の学びの方向性を見つけることができるかもしれません。

最後に、自分の学びをアウトプットできるとベターです。
私のように業務の中で実際に使ってみることや、応用できるとさらに理解が深まります。
ただすぐに実行できない場合はブログやSNSで感想を書くところからスタートするのもよいのではないかと思います。
文章にしてみることで自分の理解を確かめることに繋がりますし、ほかの人の学びの助けやヒント、あるいはフィードバックのネタになるかもしれません。
理解を深め応用していくことで、自分の学びを更に深めて様々なところで活かし貢献できると思います。

私自身もまだまだ理想とするようなエンジニア像からは遠いと感じており道半ばです。
これからも広く学び、新しい技術や分野に挑戦していきたいと思っています。
そのためにも技術トレンドや勉強会にアンテナを張り、学んだことを生かして周りにとってより良い影響を与え貢献し続けていきたいです。
